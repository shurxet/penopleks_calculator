version: '3.8'


services:
  postgres:
    image: postgres:16.0-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5


  migrations:
    image: ${DOCKER_USERNAME}/penoplex_calculations:latest
    container_name: migrations
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: python manage.py migrate


  api:
    image: ${DOCKER_USERNAME}/penoplex_calculations:latest
    container_name: api
    env_file:
      - .env
    volumes:
      - ./js/:/app/calculator/static/calculator/js/.
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: always
    command: bash -c "python manage.py collectstatic --noinput && gunicorn -b 0.0.0.0:8000 backend.wsgi:application --reload -w 4"


  nginx:
    build:
      dockerfile: Dockerfile
      context: ./nginx/
    container_name: nginx
    volumes:
      - ./static:/app/static
      - ./media:/app/media
      - ./ssl:/etc/ssl
    depends_on:
      - api
    ports:
      - ${NGINX_EXTERNAL_PORT}:80
      - ${NGINX_EXTERNAL_SSL_PORT}:443
    restart: unless-stopped
